input {
    jdbc {
        jdbc_connection_string => "jdbc:postgresql://postgres:5432/buyandsell"
        jdbc_user => "buyandsell"
        jdbc_password => "buyandsell"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_paging_enabled => true
        use_column_value => true
        tracking_column => "item_updated_at"
        tracking_column_type => "timestamp"
        schedule => "*/10 * * * * *"
        statement => "SELECT
                          item.id as item_id,
                          item.category_id as item_category_id,
                          item.title as item_title,
                          item.description as item_description,
                          item.user_id as item_user_id,
                          item.price as item_price,
                          item.currency as item_currenct,
                          item.country as item_country,
                          item.city as item_city,
                          item.region as item_region,
                          item.address as item_address,
                          item.img_url as item_image,
                          item.updated_at as item_updated_at,
                          item.created_at as item_created_at,
                          json_agg(json_build_object('field_id', value.field_id, 'field_value', value.field_value))::text AS fields
                      FROM item_entity item
                               INNER JOIN value_entity value ON item.id = value.item_id
                      WHERE item.updated_at > :sql_last_value
                        AND item.updated_at < CURRENT_TIMESTAMP
                      GROUP BY item_updated_at, item_description, item.id
                      ORDER BY item_updated_at ASC
                      "
    }
    stdin {
            codec => plain { charset => "UTF-8"}
        }
}


filter {
    mutate {
        rename => { "fields" => "fields_json" }
    }
    json {
        source => "fields_json"
        target => "fields"
        remove_field => ["fields_json"]
    }
}

output {
    elasticsearch {
        hosts => ["http://elasticsearch:9200"]
        index => "item_entity"
        document_id => "%{item_id}"
    }
    stdout { codec => rubydebug }
}